package dk.tec.h4java;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.*;

@RestController // This means that this class is a Controller
@RequestMapping("/person") // This means URL's start with /person (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private PersonRepository personRepository;

    @PostMapping("/add_person") // Map ONLY POST Requests
     Person addNewUser (@RequestBody Person person) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request


        return personRepository.save(person);
    }

    @GetMapping("/all_persons")
    public @ResponseBody Iterable<Person> getAllPersons() {
        // This returns a JSON or XML with the users
        return personRepository.findAll();
    }
    @GetMapping("/get_person/{id}")
    Person getSpecificPerson(@PathVariable Long id) {
        // This returns a JSON or XML with the users
        return personRepository.findById(id)
                .orElseThrow(() -> new PersonNotFoundException(id));
    }

    @PutMapping("/update_person/{id}")
    Person updatePerson(@RequestBody Person updatedPerson, @PathVariable Long id) {

        return personRepository.findById(id)
                .map(person -> {
                    person.setName(updatedPerson.getName());
                    person.setEmail(updatedPerson.getEmail());
                    return personRepository.save(person);
                })
                .orElseGet(() -> {
                    updatedPerson.setId(id);
                    return personRepository.save(updatedPerson);
                });
    }


    @DeleteMapping("/delete_person/{id}")
    void deleteSpecificPerson(@PathVariable Long id){
        personRepository.deleteById(id);
    }


}